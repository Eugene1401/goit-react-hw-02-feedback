{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","data/constants.js","App.js","index.js"],"names":["Section","title","children","FeedbackButton","feedback","onLeaveFeedback","type","data-feedback","onClick","FeedbackOptions","options","map","option","PropTypes","arrayOf","string","func","isRequired","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FEEDBACK_OPTIONS","App","state","handleFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositivePercentage","Math","round","this","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,M,gBCJDC,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OACE,wBAAQC,KAAK,SAASC,gBAAeH,EAAUI,QAASH,EAAxD,SACGD,KAKDK,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASL,EAAsB,EAAtBA,gBAClC,OAAOK,EAAQC,KAAI,SAACC,GAAD,OACjB,cAAC,EAAD,CAAgBR,SAAUQ,EAAQP,gBAAiBA,QAIvDI,EAAgBI,UAAY,CAC1BH,QAASG,IAAUC,QAAQD,IAAUE,QACrCV,gBAAiBQ,IAAUG,KAAKC,YAGnBR,QCbAS,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCiB3BC,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGD,EAAQ,GACP,+BACE,uCAAUH,KACV,2CAAcC,KACd,sCAASC,KACT,wCAAWC,KACX,sDAAyBC,EAAzB,WAGO,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BCd/BO,EAAmB,CAAC,OAAQ,UAAW,OC2DrCC,E,4MAhDbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,eAAiB,YAAiB,IACxBzB,EADuB,EAAb0B,OACUC,QAApB3B,SACR,EAAK4B,UAAS,SAACC,GAAD,sBAAmB7B,EAAW6B,EAAU7B,GAAY,O,EAGpE8B,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBP,KADiB,EACXC,QADW,EACFC,K,EAIzBY,wBAA0B,WAAO,IACvBd,EAAS,EAAKO,MAAdP,KACFG,EAAQ,EAAKU,qBACnB,OAAOV,EAAQY,KAAKC,MAAOhB,EAAOG,EAAS,KAAO,G,4CAGpD,WAAU,IAAD,EACwBc,KAAKV,MAA5BP,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQc,KAAKJ,qBACbT,EAAqBa,KAAKH,0BAChC,OACE,sBAAKI,UAAU,YAAf,UACE,cAAC,EAAD,CAAStC,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAASgB,EACTrB,gBAAiBiC,KAAKT,mBAG1B,cAAC,EAAD,CAAS5B,MAAM,aAAf,SACE,cAAC,EAAD,CACEoB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAzCde,aCLlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5faa0de2.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button type=\"button\" data-feedback={feedback} onClick={onLeaveFeedback}>\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map((option) => (\n    <FeedbackButton feedback={option} onLeaveFeedback={onLeaveFeedback} />\n  ));\n};\n\nFeedbackOptions.PropTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import Notification from \"../Notification/Notification\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <ul>\n          <li>Good {good}</li>\n          <li>Neautral {neutral}</li>\n          <li>Bad {bad}</li>\n          <li>Total {total}</li>\n          <li>Positive Percentage {positivePercentage} %</li>\n        </ul>\n      )}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nexport default Statistics;\n","export const FEEDBACK_OPTIONS = [\"good\", \"neutral\", \"bad\"];\n","import { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Section from \"./components/Section/Section\";\nimport Feedbacks from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nimport { FEEDBACK_OPTIONS } from \"./data/constants\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState((prevState) => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositivePercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositivePercentage();\n    return (\n      <div className=\"container\">\n        <Section title=\"Please leave feedback\">\n          <Feedbacks\n            options={FEEDBACK_OPTIONS}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}